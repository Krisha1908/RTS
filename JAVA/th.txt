Java Installation:
    1.JDK - Java Development kit
            For running java program 
    2.JRE - Java Runtime Enviorment 
            Help in executing program
    3.JVM - Java Virtual MAchine

    1.Compilation:
    Source Code - .java (save) --> Compiler (IN JDK) --> Covert into byte code(JRE) - .class(save)
    2.Execution:
    byte code --> JVM --> Native Language(computer lan - 0 and 1)


'' --> CHARCTER
" " -->STRING


Static -  Without creating an object we can execute our class


theory:
--> Any non-Static Method can be called only with class object if we are calling from static Method , but if we
    want to call non-static method from non-static no need of object
--> Any static method can be called with class name or Without class name inside


*Instance Variable:
    Instance Variable need not to intilized compulsory
    If Instance Variable is not assigned , then it will give default value
    Can not use non-static Instance Variable in Static Method
    both Static and non-static Variable Instance Variable can be use in non-static Method
    n copy will generate for non-static Instance Variable
    Only one copy will generate for static Instance Variable


*Local Variable:
    Local Variable need to be intilized compulsory
    Can not create Static Variable inside the main Method due to Heap and Stack concepts

*Scanner;
    Scanner is itself a class
    we can use it by Making an object
    for taking an input we use System.in  as an Argument--> Inputstream --> console
    out  = printstream
    in = inputstream

*OOPS
1. Encapsulation:
    1.Counstrutor:-
        Same name As class name
        Types:
        1.default
        2.parameter
    To Intialize Instance Variable

    2.Data Hiding:
        1.Accsess 
            Private
            Default
            Protected
            Public
        2.Non-Accsess Modifier
            Static
            Final:
                Final = constant
                If we assigned the value using final class then it can not be reassinged
                Final CLass can not be inherited

2. Inheritance:
    A child class Can Accsess the Property of Parent class
    We can connect class with Extends Keyword.

** Construtor With Inheritanc:

1.
        parent has Default Construtor
        Child has Default Construtor 

    Then First parent class then child class Property will execute

2.
        parent has parameterized Construtor
        child has parameterized Construtor
    
    Then if We want Accsess the the Property of parent Then in child class we have to use super(pass parameter)keyword.

3.       
        parent has parameterized Construtor
         parent has also Default Construtor

          child has parameterized Construtor
             Child has Default Construtor 

    then super keypword is not compulsory to execute parent Protected.

** polymorephisam :

Many from of the function
 
1. complie time poly , early biniding , static bininding , method overloaing()
2. run time poly , lazy biniding , dynamic biniding , method overriding


1. Method OverLoadig : 
-->We will have same name of method in same class or parent class or child class but with different parameters is called METHOS OVERLOADING.

2.Method OverRiding : 
-->child class have same method of parent class called overriding....
it should match signature
same method name , same para , same return type* -->(optional)

access modifiers
return type
method name
param

Accsess Modifier can be different
if parent class have default modifier -> child class can be default,proected,public
if parent class have Protected modifier - >Protected,public
***Private modifier can not be OverRiding
final modifier can not be overriding

**Abstraction :--
    it is using for data-hiding.
    Abstraction Method must be overRide.
    In Abstraction class we can create non-Abstraction method.
    Abstraction Method can not be call by object.
    By child class object we call Non-Abstraction.
    abstract methods can be created inside abstract only...
    if we don't want to create body inside parent class 
    we can achive  using abstract class and abstract method...
    abstract methods can be created inside abstract only...


    CLASS - CLASS ---> Extends
    CLASS - INTERFACE --->IMPLEMENTS
    INTERFACE - INTERFACE ---> EXTENDS

**Interface :---
    Fully Abstract class
    All Method are public abstract
    intefrface ==== class.
    //all instancr variable are public final static
	//public final static int x =10; ==== int x =10;
    can be multiple IMPLEMENTS (class)


**run time polymorephisam | polymorphic object
    reference of parent class and object of child class
    //refer = Object | memory
    //Run r = new Running();

**Types of Interface
    1. Normal Interface
    2. functional Interface ->Only one method
    -->which interface has only 1 method called interface..
    3. Marker Interface ->Empty mostly
    -->interface which has no method and no variables...
	//Serilizable

**If we want to crete body inside the INTERFACE then we can use below Keywords

    1.default
    -->this is Keyword not a access modifier.
    --> reference of parent class and object of child class
    2.Static 
    -->we can create object of static method directly from class name 
    -->Non-access modifier  

    1.Default:
        With help of Default Keyword ,it will not be compulsory to override in class
        We can call it by Referene of parent and object of class
    2.Static:
        With this non-Accsess Modifier it will not be compulsory to override in class
        we can call it by it class name


String is immutable in JAVA






